import logging
import os
import asyncio

from aiogram import types, Router, F

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, URLInputFile
from aiogram.enums import ChatType
from dotenv import load_dotenv

from configuration.config_bot import bot

import keyboards.patient_kb as kb
import keyboards.constants as kc
from database.questions_db import (
    update_question_response,
    has_unanswered_question,
    is_question_answered,
    cancel_question_in_db,
    get_patient_name_by_tg_id,
)
from states.states_patient import PatientStates
from handlers.format_functions.patient_ask import (
    send_question_to_support,
    extract_question_id_from_message,
    get_patient_tg_id_from_question_id,
    support_group_id,
)
from middlewares.middlewares import TestMiddleware
from database.schedule import get_schedule_by_tg_id
from database.survey_bd import (
    get_survey_by_id,
    add_to_result_in_survey,
    add_survey_answers,
    get_client_name_by_tg_id,
    get_doctor_by_client_tg_id,
)
from database.constants_db import preparations, stage_number_to_name
from database.supabase_helpers import get_url
from database.admin_db import find_id_doctor

patient_router = Router()
patient_tg_id = None

load_dotenv()
send_lock = asyncio.Lock()
patient_router.message.middleware(TestMiddleware())
logger = logging.getLogger(__name__)
choose_action = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
support_group_id = os.getenv("SUPPORT_GROUP_ID")


async def handle_patient_command(message: types.Message, state: FSMContext):
    global patient_tg_id
    if patient_tg_id is None:
        user_data = await state.get_data()
        patient_tg_id = user_data.get("tg_id")

    await message.answer (
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


async def send_schedule_info(message: types.Message, patient_tg_id: int):
    schedule = get_schedule_by_tg_id(patient_tg_id)
    if schedule["result"]["code"] == 0:
        schedule = schedule["result"]["item"]
        await message.answer("–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å ‚ú®")
        date = schedule["start_time"][: schedule["start_time"].find("T")]
        time = schedule["start_time"][schedule["start_time"].find("T") + 1 :]
        name_procedure = schedule["procedure_name"]
        doctor = schedule["doctor_first_name"] + " " + schedule["doctor_last_name"]
        await message.answer(
            f"<b>{date}</b> –≤ <b>{time}</b>\n–ù–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É: <b>{name_procedure}</b>\n"
            f"–£ –¥–æ–∫—Ç–æ—Ä–∞: <b>{doctor}</b>",
            parse_mode="HTML",
        )
    else:
        await message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üôà")


@patient_router.message(
    PatientStates.menu, F.text == kc.buttons_patient_menu["schedule"]
)
async def menu_handler(message: types.Message, state: FSMContext):
    await send_schedule_info(message, message.from_user.id)
    await state.set_state(PatientStates.menu)


@patient_router.message(
    PatientStates.menu, F.text == kc.buttons_patient_menu["question"]
)
async def question_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if has_unanswered_question(user_id):
        await message.answer(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞."
        )
    else:
        await message.answer(
            "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ",
            reply_markup=kb.patient_question_keyboard(),
        )
        await state.set_state(PatientStates.ask_question)


@patient_router.message(PatientStates.ask_question)
async def answer_question_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º
    if message.content_type != "text":
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.",
            reply_markup=kb.patient_question_keyboard(),  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
    if message.text == kc.buttons_patient_question["back"]:
        await message.answer(choose_action, reply_markup=kb.patient_menu_keyboard())
        await state.set_state(PatientStates.menu)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ
        await send_question_to_support(message, state)
        await message.answer(
            "–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=kb.patient_question_cancel_keyboard(),
        )
        await state.set_state(PatientStates.awaiting_response)


@patient_router.message(PatientStates.awaiting_response)
async def handle_cancel_or_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_id = data.get("question_id")
    if message.text == kc.buttons_patient_cancel["cancel_question"]:
        # –û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
        response = cancel_question_in_db(question_id)

        if response:
            patient_name = get_patient_name_by_tg_id(message.from_user.id)
            first_name = patient_name["first_name"] if patient_name else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            last_name = patient_name["last_name"] if patient_name else ""
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            support_msg_id = data.get("support_msg_id")
            if support_msg_id:
                await message.bot.edit_message_text(
                    text=(
                        f"–í–æ–ø—Ä–æ—Å ‚Ññ{question_id}.\n\n"
                        f"–ü–∞—Ü–∏–µ–Ω—Ç: {first_name} {last_name}\n"
                        f"–°—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞: –æ—Ç–º–µ–Ω–µ–ΩüóëÔ∏è"
                    ),
                    chat_id=support_group_id,
                    message_id=support_msg_id,
                    parse_mode="HTML",
                )
            await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

        await message.answer(choose_action, reply_markup=kb.patient_menu_keyboard())
        await state.set_state(PatientStates.menu)
        return  # –í–æ–∑–≤—Ä–∞—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    elif message.text == kc.buttons_patient_cancel["schedule"]:
        await send_schedule_info(message, message.from_user.id)
    elif message.text == kc.buttons_patient_menu["question"]:
        await message.answer(
            "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ",
            reply_markup=kb.patient_question_keyboard(),
        )
        await state.set_state(PatientStates.ask_question)


@patient_router.message(
    lambda message: message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]
)
async def handle_support_message(message: types.Message, state: FSMContext):
    try:
        if message.reply_to_message:
            original_message = message.reply_to_message
            question_id = extract_question_id_from_message(original_message.text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞
            status = is_question_answered(question_id)

            if status is None:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞.")
                return

            if status:
                if original_message.text.find("–æ—Ç–º–µ–Ω–µ–ΩüóëÔ∏è") != -1:
                    await message.reply("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
                else:
                    await message.reply("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
                return

            support_response = message.text.strip()
            response = update_question_response(question_id, support_response)

            if response and response.data:
                chat_id = message.chat.id
                message_id = original_message.message_id
                original_text = original_message.text

                updated_text = original_text.replace("–æ—Ç–∫—Ä—ã—Ç‚úÖ", "–∑–∞–∫—Ä—ã—Ç‚ùå")
                await message.bot.edit_message_text(
                    text=updated_text,
                    chat_id=chat_id,
                    message_id=message_id,
                    parse_mode="HTML",
                )

                patient_tg_id = get_patient_tg_id_from_question_id(question_id)
                try:
                    await message.bot.send_message(
                        patient_tg_id,
                        f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n–û—Ç–≤–µ—Ç:\n{support_response}",
                        parse_mode="HTML",
                        reply_markup=kb.patient_menu_keyboard(),
                    )
                except Exception as e:
                    logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç—É: {e}")
                await state.set_state(PatientStates.menu)
                await message.reply("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç—É.")
            else:
                await message.reply(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
    except ValueError as e:
        logger.exception(f"–û—à–∏–±–∫–∞: {e}")


async def survey_info(state: FSMContext, chat_id):
    global patient_tg_id
    if patient_tg_id is None:
        user_data = await state.get_data()
        patient_tg_id = user_data.get("tg_id")

    await bot.send_message(
        chat_id=chat_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –º–µ–Ω—é:",
        reply_markup=kb.no_question_keyboard(),
    )
    await bot.send_message(
        chat_id=chat_id,
        text="–ö–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–µ—á–µ–Ω–∏—è?"
        " –¢—Ä–µ–≤–æ–∂–∞—Ç –ª–∏ –í–∞—Å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã?",
    )
    await state.set_state(PatientStates.info_survey)


@patient_router.message(PatientStates.info_survey)
async def send_to_doctor(message: types.Message, state: FSMContext):

    data = {
        "title": "–ö–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–µ—á–µ–Ω–∏—è?",
        "answers": [],
    }
    if message.text != kc.buttons_patient_no_question["no question"]:
        send_message = message.text
        data["answers"].append(
            {
                "question": "–¢—Ä–µ–≤–æ–∂–∞—Ç –ª–∏ –í–∞—Å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã?",
                "answer": f"{send_message}",
            }
        )
        await send_bad_answers_to_doctor(data)
        add_to_result_in_survey(patient_tg_id, "Bad")
    else:
        await send_positive_answers_to_doctor(data)
        add_to_result_in_survey(patient_tg_id, "Good")
    await message.answer(
        "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ‚ù§Ô∏è", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


async def survey_with_answers(state: FSMContext, chat_id, survey_id):
    survey = get_survey_by_id(survey_id)["result"]["file"]
    description = survey["description"]
    title = survey["title"]

    await state.update_data(
        survey=survey,
        current_question_index=0,
        point=0,
        title=title,
        bad_answers={"title": title, "answers": []},
    )

    await bot.send_message(
        chat_id=chat_id, text=description, reply_markup=ReplyKeyboardRemove()
    )
    await ask_next_question(state, None, chat_id=chat_id)


async def ask_next_question(
    state: FSMContext,
    message_or_query: types.Message | types.CallbackQuery | None = None,
    chat_id: int | None = None,
):
    data = await state.get_data()
    questions = data["survey"]["questions"]
    current_question_index = data["current_question_index"]

    if current_question_index < len(questions):
        question = questions[current_question_index]
        await state.set_state(PatientStates.ask_survey)
        if isinstance(message_or_query, types.Message):
            await message_or_query.answer(
                text=f"{question['question_text']}",
                reply_markup=await kb.inline_survey(question["answers"]),
            )
        elif isinstance(message_or_query, types.CallbackQuery):
            await message_or_query.message.edit_text(
                text=f"{question['question_text']}",
                reply_markup=await kb.inline_survey(question["answers"]),
            )
        elif chat_id:
            await bot.send_message(
                chat_id=chat_id,
                text=f"{question['question_text']}",
                reply_markup=await kb.inline_survey(question["answers"]),
            )
    else:
        await message_or_query.message.delete()

        total_points = data["point"]
        if total_points < 0:
            add_to_result_in_survey(patient_tg_id, "Bad")
            bad_answers = data.get("bad_answers", {})
            await send_bad_answers_to_doctor(bad_answers)
        elif total_points == 0:
            add_to_result_in_survey(patient_tg_id, "Normal")
            await send_positive_answers_to_doctor(data)

            id_doctor = await find_id_doctor(patient_tg_id)
            format_video = f"3.7.{id_doctor['doctor_id']}"
            video = await get_url(format_video)
            video = URLInputFile(video)

            processing_message = await bot.send_message(
                chat_id=patient_tg_id, text="–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..."
            )
            await bot.send_video(chat_id=patient_tg_id, video=video)

            async with send_lock:
                await bot.send_message(
                    chat_id=patient_tg_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"
                )
                await bot.delete_message(
                    chat_id=patient_tg_id, message_id=processing_message.message_id
                )

        else:
            add_to_result_in_survey(patient_tg_id, "Good")
            await send_positive_answers_to_doctor(data)

            id_doctor = await find_id_doctor(patient_tg_id)
            format_video = f"3.7.{id_doctor['doctor_id']}"
            video = URLInputFile(await get_url(format_video))

            processing_message = await bot.send_message(
                chat_id=patient_tg_id, text="–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..."
            )
            await bot.send_video(chat_id=patient_tg_id, video=video)

            async with send_lock:
                await bot.delete_message(
                    chat_id=patient_tg_id, message_id=processing_message.message_id
                )

        await message_or_query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ‚ù§Ô∏è")
        await message_or_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ", reply_markup=kb.patient_menu_keyboard()
        )
        await state.set_state(PatientStates.menu)


@patient_router.callback_query(PatientStates.ask_survey)
async def test_survey_ask(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_point = data["point"]
    current_question_index = data["current_question_index"]
    questions = data["survey"]["questions"]
    question = questions[current_question_index]

    point = question["answers"][query.data]["point"]

    new_point = current_point + point

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
    button_text = question["answers"][query.data]["text"]

    if point < 0:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        bad_answers = data.get("bad_answers", {})
        bad_answers["answers"].append(
            {"question": question["question_text"], "answer": button_text}
        )
        await state.update_data(bad_answers=bad_answers)

    await state.update_data(
        point=new_point, current_question_index=current_question_index + 1
    )

    await ask_next_question(state, query)


async def survey_preparation(state: FSMContext, chat_id):
    await bot.send_message(
        chat_id=chat_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º –≤—Ä–∞—á",
        reply_markup=ReplyKeyboardRemove(),
    )
    await bot.send_message(
        chat_id=chat_id,
        text="–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤:",
        reply_markup=await kb.inline_preparations(preparations),
    )
    await state.set_state(PatientStates.survey_preparation)


@patient_router.callback_query(PatientStates.survey_preparation)
async def send_video(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    format_preparation = f"3.3.{int(query.data)}"
    url = URLInputFile(await get_url(format_preparation))
    processing_message = await bot.send_message(
        chat_id=patient_tg_id, text="–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..."
    )
    await bot.send_video(chat_id=patient_tg_id, video=url)
    async with send_lock:
        await bot.send_message(
            chat_id=patient_tg_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"
        )
        await bot.delete_message(
            chat_id=patient_tg_id, message_id=processing_message.message_id
        )
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await bot.send_message(
            chat_id=patient_tg_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ",
            reply_markup=kb.patient_menu_keyboard(),
        )
        await state.set_state(PatientStates.menu)


async def survey_injection(state: FSMContext, chat_id):
    title = "–í–∞–º —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–∫–æ–ª?"
    await bot.send_message(
        chat_id=chat_id,
        text="–í–∞–º —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–∫–æ–ª?",
        reply_markup=kb.yes_or_no(),
    )
    await state.update_data(
        title=title,
        bad_answers={"title": title, "answers": []},
    )
    await state.set_state(PatientStates.survey_injection)


@patient_router.message(
    PatientStates.survey_injection, F.text == kc.buttons_patient_yes_or_no["yes"]
)
async def after_injection_answer_yes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await send_positive_answers_to_doctor(data)
    add_to_result_in_survey(patient_tg_id, "Good")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ‚ù§Ô∏è")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


@patient_router.message(
    PatientStates.survey_injection, F.text == kc.buttons_patient_yes_or_no["no"]
)
async def after_injection_answer_no(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É —Ç–µ–∫—Å—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(PatientStates.no_injection_reason)


@patient_router.message(PatientStates.no_injection_reason)
async def send_to_doctor_reason(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –≤—Ä–∞—á—É
    data = await state.get_data()
    bad_answers = data.get("bad_answers", {})
    bad_answers["answers"].append(
        {"question": "–ù–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–∏—á–∏–Ω–∞", "answer": f"{message.text}"}
    )
    await send_bad_answers_to_doctor(bad_answers)
    add_to_result_in_survey(patient_tg_id, "Bad")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ‚ù§Ô∏è")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


# –û–ø—Ä–æ—Å –ø—Ä–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def survey_emotion(state: FSMContext, chat_id, survey_id):
    survey = get_survey_by_id(survey_id)["result"]["file"]
    description = survey["description"]
    title = survey["title"]

    await state.update_data(
        survey=survey,
        current_question_index=0,
        point_part1=0,  # –û—á–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        point_part2=0,  # –û—á–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        title=title,
        bad_answers={"title": title, "answers": []},
    )

    await bot.send_message(
        chat_id=chat_id, text=description, reply_markup=ReplyKeyboardRemove()
    )
    await ask_next_question_emotion(state, None, chat_id=chat_id)


async def ask_next_question_emotion(
    state: FSMContext,
    message_or_query: types.Message | types.CallbackQuery | None = None,
    chat_id: int | None = None,
):
    data = await state.get_data()
    current_question_index = data["current_question_index"]

    part1_questions = data["survey"]["parts"]["part1"]["questions"]
    part2_questions = data["survey"]["parts"]["part2"]["questions"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
    if current_question_index < len(part1_questions):
        questions = part1_questions
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
    elif current_question_index - len(part1_questions) < len(part2_questions):
        questions = part2_questions
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
        current_question_index -= len(part1_questions)
    else:
        # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        await finish_survey(state, message_or_query)
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = questions[current_question_index]
    await state.set_state(PatientStates.ask_survey_emotion)

    if isinstance(message_or_query, types.Message):
        await message_or_query.answer(
            text=f"{question['question_text']}",
            reply_markup=await kb.inline_survey(question["answers"]),
        )
    elif isinstance(message_or_query, types.CallbackQuery):
        await message_or_query.message.edit_text(
            text=f"{question['question_text']}",
            reply_markup=await kb.inline_survey(question["answers"]),
        )
    elif chat_id:
        await bot.send_message(
            chat_id=chat_id,
            text=f"{question['question_text']}",
            reply_markup=await kb.inline_survey(question["answers"]),
        )


async def finish_survey(state: FSMContext, message_or_query: types.CallbackQuery):
    global survey_result
    data = await state.get_data()
    point_part1 = data["point_part1"]
    point_part2 = data["point_part2"]

    bad_answers = data.get("bad_answers", {})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
    if point_part1 > 7:
        bad_answers["answers"].append(
            {"question": "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "answer": "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
        )
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
    if point_part2 > 7:
        bad_answers["answers"].append(
            {"question": "–î–µ–ø—Ä–µ—Å—Å–∏—è", "answer": "–î–µ–ø—Ä–µ—Å—Å–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
        )
    if point_part1 > 7 or point_part2 > 7:
        survey_result = "Bad"
        await send_bad_answers_to_doctor(bad_answers)
    if point_part1 <= 7 and point_part2 <= 7:
        survey_result = "Good"
        await send_positive_answers_to_doctor(data)

    add_to_result_in_survey(patient_tg_id, survey_result)

    await message_or_query.message.delete()
    await message_or_query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ‚ù§Ô∏è")
    await message_or_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


@patient_router.callback_query(PatientStates.ask_survey_emotion)
async def emotion_survey_ask(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_question_index = data["current_question_index"]

    part1_questions = data["survey"]["parts"]["part1"]["questions"]
    part2_questions = data["survey"]["parts"]["part2"]["questions"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if current_question_index < len(part1_questions):
        questions = part1_questions
        is_first_part = True
    else:
        questions = part2_questions
        is_first_part = False
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
        current_question_index -= len(part1_questions)

    question = questions[current_question_index]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–∏
    if is_first_part:
        current_point = data["point_part1"]
    else:
        current_point = data["point_part2"]

    point = question["answers"][query.data]["point"]
    new_point = current_point + point

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–∏
    if is_first_part:
        await state.update_data(point_part1=new_point)
    else:
        await state.update_data(point_part2=new_point)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await state.update_data(current_question_index=data["current_question_index"] + 1)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await ask_next_question_emotion(state, query)


async def survey_not_record(state: FSMContext, chat_id):
    await bot.send_message(
        chat_id=chat_id,
        text="–í–∞–º —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–µ–¥–µ–Ω–∏—é –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏?",
        reply_markup=kb.yes_or_no(),
    )

    await state.set_state(PatientStates.survey_not_record)


@patient_router.message(
    PatientStates.survey_not_record, F.text == kc.buttons_patient_yes_or_no["yes"]
)
async def survey_not_record_yes(message: types.Message, state: FSMContext):
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ‚ù§Ô∏è")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


@patient_router.message(
    PatientStates.survey_not_record, F.text == kc.buttons_patient_yes_or_no["no"]
)
async def survey_not_record_no(message: types.Message, state: FSMContext):
    patient_tg_id = message.from_user.id

    if not patient_tg_id:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞.")
        return

    full_info = await bot.get_chat(patient_tg_id)

    patient_info = get_client_name_by_tg_id(patient_tg_id)
    first_name = patient_info["result"]["first_name"]
    last_name = patient_info["result"]["last_name"]
    phone_number = patient_info["result"]["phone_number"]
    username = full_info.username if full_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    stage = stage_number_to_name.get(patient_info["result"]["stage"], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    out_text = (
        f"<b>–ü–∞—Ü–∏–µ–Ω—Ç</b>: {first_name} {last_name}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: +{phone_number}\n"
        f"<b>–ê–∫–∫–∞—É–Ω—Ç</b>: @{username}\n<b>–¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π</b>: {stage}\n\n"
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞</b>: –ù–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–µ–¥–µ–Ω–∏—é –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏"
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    await send_to_call_center(out_text)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ‚ù§Ô∏è\n–° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏ –ø–æ–¥–±–µ—Ä–µ—Ç —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è. –ñ–µ–ª–∞–µ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è!"
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


async def survey_all_good(state: FSMContext, chat_id):
    await bot.send_message(
        chat_id=chat_id,
        text="–í—Å–µ –ª–∏ —É –≤–∞—Å —Ö–æ—Ä–æ—à–æ?",
        reply_markup=kb.yes_or_no(),
    )

    await state.set_state(PatientStates.survey_all_good)


@patient_router.message(
    PatientStates.survey_all_good, F.text == kc.buttons_patient_yes_or_no["yes"]
)
async def survey_all_good_yes(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—Å—è –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –æ—Ç –í–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤!"
        " –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ–º—É –ª–µ—á–∞—â–µ–º—É –≤—Ä–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–ª—ã—à–∞ ‚ù§Ô∏è"
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: ", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


@patient_router.message(
    PatientStates.survey_all_good, F.text == kc.buttons_patient_yes_or_no["no"]
)
async def survey_all_good_no(message: types.Message, state: FSMContext):

    await message.answer(
        "–í–∞–º –ø–æ–º–æ—á—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É-—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–ª–æ–≥—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–ª–∞–Ω–æ–≤?",
        reply_markup=kb.yes_or_no(),
    )
    await state.set_state(PatientStates.survey_all_good_need_help)


@patient_router.message(
    PatientStates.survey_all_good_need_help,
    F.text == kc.buttons_patient_yes_or_no["no"],
)
async def survey_all_good_no_no(message: types.Message, state: FSMContext):

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ‚ù§Ô∏è", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


@patient_router.message(
    PatientStates.survey_all_good_need_help,
    F.text == kc.buttons_patient_yes_or_no["yes"],
)
async def survey_all_good_no_yes(message: types.Message, state: FSMContext):
    patient_tg_id = message.from_user.id

    if not patient_tg_id:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞.")
        return
    full_info = await bot.get_chat(patient_tg_id)

    patient_info = get_client_name_by_tg_id(patient_tg_id)
    first_name = patient_info["result"]["first_name"]
    last_name = patient_info["result"]["last_name"]
    phone_number = patient_info["result"]["phone_number"]
    username = full_info.username
    stage = stage_number_to_name[patient_info["result"]["stage"]]

    out_text = (
        f"<b>–ü–∞—Ü–∏–µ–Ω—Ç</b>: {first_name} {last_name}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: +{phone_number}\n"
        f"<b>–ê–∫–∫–∞—É–Ω—Ç</b>: @{username}\n<b>–¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π</b>: {stage}\n\n"
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞</b>: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É-—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–ª–æ–≥—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."
    )

    await send_to_call_center(out_text)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ ‚ù§Ô∏è", reply_markup=kb.patient_menu_keyboard()
    )
    await state.set_state(PatientStates.menu)


# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤


async def send_bad_answers_to_doctor(data):
    result = {"title": data["title"], "answers": data["answers"]}
    add_survey_answers(patient_tg_id, result)

    full_info = await bot.get_chat(patient_tg_id)

    doctor_tg_ids = get_doctor_by_client_tg_id(patient_tg_id)["result"]["doctors"]
    patient_info = get_client_name_by_tg_id(patient_tg_id)
    first_name = patient_info["result"]["first_name"]
    last_name = patient_info["result"]["last_name"]
    phone_number = patient_info["result"]["phone_number"]
    username = full_info.username
    stage = stage_number_to_name[patient_info["result"]["stage"]]

    out_text = (
        f"<u>–¢—Ä–µ–≤–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</u> ‚ÄºÔ∏è\n\n<b>–ü–∞—Ü–∏–µ–Ω—Ç</b>: {first_name} {last_name}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: +{phone_number}\n"
        f"<b>–ê–∫–∫–∞—É–Ω—Ç</b>: @{username}\n<b>–¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π</b>: {stage}\n\n<b>–û–ø—Ä–æ—Å</b>: {result['title']}\n\n"
    )
    for answer in result["answers"]:
        out_text += (
            f"<b>–í–æ–ø—Ä–æ—Å:</b> {answer['question']}\n<b>–û—Ç–≤–µ—Ç:</b> {answer['answer']}\n\n"
        )
    for doc_id in doctor_tg_ids:
        await bot.send_message(
            text=out_text, chat_id=doc_id["tg_id"], parse_mode="HTML"
        )


async def send_positive_answers_to_doctor(data):
    result = {"title": data["title"]}
    add_survey_answers(patient_tg_id, result)


async def send_to_call_center(out_text):
    await bot.send_message(chat_id=support_group_id, text=out_text, parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω—ã–π –æ–ø—Ä–æ—Å
async def switch_survey(state, tg_id, survey_id):
    survey_list = {
        1: "survey_info",
        2: "survey_preparation",
        3: "survey_injection",
        4: "survey_after_procedure",
        5: "survey_emotion",
        6: "survey_not_record",
        7: "survey_all_good",
    }
    out_survey = survey_list[int(survey_id)]
    match out_survey:
        case "survey_info":
            await survey_info(state, tg_id)
        case "survey_preparation":
            await survey_preparation(state, tg_id)
        case "survey_injection":
            await survey_injection(state, tg_id)
        case "survey_after_procedure":
            await survey_with_answers(state, tg_id, 1)
        case "survey_emotion":
            await survey_emotion(state, tg_id, 2)
        case "survey_not_record":
            await survey_not_record(state, tg_id)
        case "survey_all_good":
            await survey_all_good(state, tg_id)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@patient_router.message(Command("survey_info"))
async def func_survey_info(message: types.Message, state: FSMContext):
    await survey_info(state, chat_id=message.chat.id)


@patient_router.message(Command("survey_preparation"))
async def func_survey_info(message: types.Message, state: FSMContext):
    await survey_preparation(state, chat_id=message.chat.id)


@patient_router.message(Command("survey_injection"))
async def func_survey_info(message: types.Message, state: FSMContext):
    await survey_injection(state, chat_id=message.chat.id)


@patient_router.message(Command("survey_after"))
async def func_survey_info(message: types.Message, state: FSMContext):
    await survey_with_answers(state, chat_id=message.chat.id, survey_id=1)


@patient_router.message(Command("survey_emotion"))
async def func_survey_info(message: types.Message, state: FSMContext):
    await survey_emotion(state, chat_id=message.chat.id, survey_id=2)


@patient_router.message(Command("survey_not_record"))
async def func_survey_not_record(message: types.Message, state: FSMContext):
    await survey_not_record(state, chat_id=message.chat.id)


@patient_router.message(Command("survey_all_good"))
async def func_survey_all_good(message: types.Message, state: FSMContext):
    await survey_all_good(state, chat_id=message.chat.id)
