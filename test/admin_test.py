from handlers.format_functions.admins_functions import (
    format_message,
    format_scenarios,
    delete_previous_messages,
    find_information,
    process_phone_number,
)
import pytest
from unittest.mock import AsyncMock, patch, call
from states.states_admin import AdminStates_find, AdminStates_global
import keyboards.admin_kb as kb


@pytest.mark.parametrize(
    "message_id, message, expected_result",
    [
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        (
            1,
            {
                "type": "text",
                "content": "–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "url": "",
                "time": "10:00",
            },
            "1. –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 10:00)",
        ),
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        (
            2,
            {
                "type": "image",
                "content": "",
                "url": "http://example.com/image.jpg",
                "time": "10:00",
            },
            "2. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüñºÔ∏è: http://example.com/image.jpg (–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 10:00)",
        ),
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        (
            3,
            {
                "type": "video",
                "content": "",
                "url": "http://example.com/video.mp4",
                "time": "10:00",
            },
            "3. –í–∏–¥–µ–æüé¶: http://example.com/video.mp4 (–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 10:00)",
        ),
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        (
            4,
            {
                "type": "link",
                "content": "",
                "url": "http://example.com",
                "time": "10:00",
            },
            "4. –°—Å—ã–ª–∫–∞üîó: http://example.com (–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 10:00)",
        ),
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        (
            5,
            {
                "type": "text image",
                "content": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º",
                "url": "http://example.com/image.jpg",
                "time": "10:00",
            },
            "5. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—éüñºÔ∏è: http://example.com/image.jpg) (–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 10:00)",
        ),
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ
        (
            6,
            {
                "type": "text video",
                "content": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ",
                "url": "http://example.com/video.mp4",
                "time": "10:00",
            },
            "6. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ (–í–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—éüé¶: http://example.com/video.mp4) (–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 10:00)",
        ),
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
        (
            8,
            {
                "type": "text",
                "content": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º",
                "url": "",
                "time": "15:30",
            },
            "8. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º (–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 15:30)",
        ),
    ],
)
def test_format_message(message_id, message, expected_result):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é format_message:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    result = format_message(message_id, message)
    assert result == expected_result


def test_format_scenarios_single_message():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    current_part = ""
    scenarios = [
        {
            "messages": [
                {"id": 1, "type": "text", "content": "Message 1", "url": "", "time": ""}
            ]
        }
    ]
    expected_result = ["1. Message 1"]
    result = format_scenarios(current_part, scenarios)
    assert result == expected_result


def test_format_scenarios_large_message_split():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º"""
    current_part = ""
    scenarios = [
        {
            "messages": [
                {"id": 1, "type": "text", "content": "A" * 4090, "url": "", "time": ""},
                {"id": 2, "type": "text", "content": "B" * 4090, "url": "", "time": ""},
            ]
        }
    ]
    expected_result = ["1. " + "A" * 4090, "2. " + "B" * 4090]
    result = format_scenarios(current_part, scenarios, max_message_length=4096)
    assert result == expected_result


@pytest.mark.asyncio
async def test_delete_previous_messages_no_exclusions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    bot = AsyncMock()
    chat_id = 123
    data = {"previous_message_ids": [1, 2, 3]}
    await delete_previous_messages(bot, chat_id, data)
    calls = [call(chat_id, 1), call(chat_id, 2), call(chat_id, 3)]
    bot.delete_message.assert_has_awaits(calls)


@pytest.mark.asyncio
async def test_delete_previous_messages_with_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    bot = AsyncMock()
    bot.delete_message.side_effect = [
        Exception("Test exception"),
        Exception("Test exception"),
    ]
    chat_id = 123
    data = {"previous_message_ids": [1, 2]}
    with patch("handlers.format_functions.admins_functions.logger") as mock_logger:
        await delete_previous_messages(bot, chat_id, data)
        expected_calls = [call(chat_id, 1), call(chat_id, 2)]
        bot.delete_message.assert_has_awaits(expected_calls)
        expected_log_calls = [
            call("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 1: Test exception"),
            call("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 2: Test exception"),
        ]
        mock_logger.exception.assert_has_calls(expected_log_calls)


@pytest.mark.asyncio
async def test_find_information_multiple_patients():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏"""
    message = AsyncMock()
    state = AsyncMock()
    info = "some_info"
    by_what = "surname"
    all_patients = {
        "result": {
            "items": [
                {
                    "patient_name": "John Doe",
                    "patient_phone": "1234567890",
                    "stage": "Stage 1",
                    "doctor_name": "Dr. Smith",
                },
                {
                    "patient_name": "Jane Doe",
                    "patient_phone": "0987654321",
                    "stage": "Stage 2",
                    "doctor_name": "Dr. Jones",
                },
            ]
        }
    }
    with patch(
        "handlers.format_functions.admins_functions.get_info_patient_number_surname",
        return_value=all_patients,
    ) as mock_get_info:
        with patch(
            "handlers.format_functions.admins_functions.kb.inline_patients_keyboard"
        ) as mock_keyboard:
            result = await find_information(message, state, info, by_what)
            mock_get_info.assert_called_once_with(info, by_what)
            mock_keyboard.assert_called_once_with(all_patients, "surname")
            state.set_state.assert_called_once_with(AdminStates_find.doctor_name_second)
            assert result == all_patients


@pytest.mark.asyncio
async def test_process_phone_number_invalid_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π –≤ process_phone_number —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    message = AsyncMock()
    state = AsyncMock()
    back_to = AsyncMock()

    message.text = "+81234567890"  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    await process_phone_number(message, state, back_to)

    message.answer.assert_called_once_with(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX."
    )
    back_to.assert_not_called()
